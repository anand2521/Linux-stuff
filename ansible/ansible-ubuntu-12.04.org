#+Title: Ansible 
#+Date: November 16, 2016
#+Author: Ashay Maheshwari


* Introduction
  + Ansible is a configuration management and provisioning tool.
  + It uses SSH to connect to servers and run the configured Tasks.
  + Without a lot of extra coding, bash scripts are usually not safety
    run again and again. Ansible uses "Facts", which is system and
    environment information it gathers ("context") before running
    Tasks.
  + Ansible uses these facts to check state and see if it needs to
    change anything in order to get the desired outcome. This makes it
    safe to run Ansible Tasks against a server over and over again.

* Installation 
  + Install build-essentials/gcc
    #+BEGIN_SRC command
    sudo apt-get install build-essential
    #+END_SRC
  + Install software properties
    #+BEGIN_SRC command
    sudo apt-get install -y software-properties-common
    sudo apt-get install -y python-software-properties
    #+END_SRC
  + Install python-dev
    #+BEGIN_SRC command
    sudo apt-get -y install python-dev
    sudo apt-get install libffi-dev
    #+END_SRC
  + Install pip
    #+BEGIN_SRC command
    sudo apt-get -y install python-pip
    #+END_SRC
  + Install ansible 
    #+BEGIN_SRC command
    pip install ansible==2.1
    #+END_SRC

* Create your inventory file 
  + An inventroy file contains the list of servers which are to be
    managed by Ansible.
  + It is a simple file which contains groups, uner which are listed
    the hostname or IP address of the server/hosts to be managed.
  + By default an inventory file is present in /etc/ansible/hosts
  + Below is a sample inventory file ::
    #+BEGIN_SRC command
    vim /etc/ansible/hosts
    [web]
    192.168.22.10
    192.168.22.11
    #+END_SRC
  + In above example, there is a group called web, which contains two
    servers/hosts listed.

* Pre-requisite for ansible to manage hosts
  + Ansible server must have key-based ssh access to the servers to be managed.
  + Server running the tasks is called a CONTROLLER NODE.
  + Server being controlled is called a CONTROLLED NODE.
  + Generate ssh-keys and copy ssh-key-id to the authorized_keys of
    appropriate servers.
  + Refer this [[https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server][Tutorial on Digital Ocean]]

* Check if your inventory is properly configured
  #+BEGIN_SRC command
root@web-app:~# ansible all -m ping 
10.4.15.209 | SUCCESS => {
    "changed": false, 
    "ping": "pong"
}
10.4.15.191 | SUCCESS => {
    "changed": false, 
    "ping": "pong"
}

  #+END_SRC
  For the command used above, here are the following possible flags -
  #+BEGIN_SRC command
  all - Use all defined servers from the inventory file
  -m ping - Use the "ping" module, which simply runs the ping command and returns the results
  -s - Use "sudo" to run the commands
  -k - Ask for a password rather than use key-based authentication
  -u vagrant - Log into servers using user vagrant
  #+END_SRC
* Ansible module
  + Modules can do things like install software, copy files, use
    templates etc.
  + Ansible modules ensure indempotence - we can run the same Tasks
    over and over without affecting the final result.
  + Example module to install nginx in servers ::
    #+BEGIN_SRC command
    ansible all -s -m apt -a 'pkg=nginx state=installed update_cache=true'
    10.4.15.191 | SUCCESS => {
    "cache_update_time": 1479354394, 
    "cache_updated": true, 
    "changed": true, 
    "stderr": "", 
    "stdout": "Reading package lists...\nBuilding dependency tree...\nReading state information...\nnginx is already the newest version.\n0 upgraded, 0 newly installed, 0 to remove and 310 not upgraded.\n5 not fully installed or removed.\nAfter this operation, 0 B of additional disk space will be used.\nSetting up libjpeg-turbo8:i386 (1.1.90+svn733-0ubuntu4.4) ...\nSetting up libxslt1.1:i386 (1.1.26-8ubuntu1.3) ...\nSetting up nginx-common (1.1.19-1ubuntu0.8) ...\nSetting up nginx-light (1.1.19-1ubuntu0.8) ...\nSetting up nginx (1.1.19-1ubuntu0.8) ...\nProcessing triggers for libc-bin ...\nldconfig deferred processing now taking place\n", 
    "stdout_lines": [
        "Reading package lists...", 
        "Building dependency tree...", 
        "Reading state information...", 
        "nginx is already the newest version.", 
        "0 upgraded, 0 newly installed, 0 to remove and 310 not upgraded.", 
        "5 not fully installed or removed.", 
        "After this operation, 0 B of additional disk space will be used.", 
        "Setting up libjpeg-turbo8:i386 (1.1.90+svn733-0ubuntu4.4) ...", 
        "Setting up libxslt1.1:i386 (1.1.26-8ubuntu1.3) ...", 
        "Setting up nginx-common (1.1.19-1ubuntu0.8) ...", 
        "Setting up nginx-light (1.1.19-1ubuntu0.8) ...", 
        "Setting up nginx (1.1.19-1ubuntu0.8) ...", 
        "Processing triggers for libc-bin ...", 
        "ldconfig deferred processing now taking place"
    ]
}

    #+END_SRC
  + Explaining the command ::
    #+BEGIN_SRC command
    all - Run on all defined hosts from the inventory file
    -s - Run using sudo
    -m apt - Use the apt module
    -a 'pkg=nginx state=installed update_cache=true' - Provide the arguments for the apt module, including the package name, our desired end state and whether to update the package repository cache or not
    #+END_SRC
       
* The Ad-hoc way of running ansible 
  + The commands mentioned in the above section are the ad-hoc
    commands of ansible.
  + These commands to be fired again cannot be used unless you save it
    somewhere.
  + Ad-hoc commands are used to setupa and manager servers for very
    rare actions.
  + A simple example can be to test connectivity using ping module of
    ansible.

* Playbooks 
  + Playbooks can run multiple tasks and provide more functionalities
    of decision making.
  + Each playbook is composed of one or more ‘plays’ in a list.
  + Simple playbook example to install Nginx ::
    + File nginx.yml 
      #+BEGIN_SRC command
      ---
      - hosts: web
        tasks:
         - name: Install Nginx
           apt: pkg=nginx state=installed update_cache=true  
      #+END_SRC
    + The hosts section mentions the group/host on which the playbook will run.
    + Run the playbook using the following command ::
      #+BEGIN_SRC command
      $ ansible-playbook -s nginx.yml
      #+END_SRC
    + Output of the above command is given below ::
      #+BEGIN_SRC command
      PLAY [web] *********************************************************************

TASK [setup] *******************************************************************
ok: [10.4.15.191]
ok: [10.4.15.209]

TASK [Install Nginx] ***********************************************************
ok: [10.4.15.191]
fatal: [10.4.15.209]: FAILED! => {"cache_update_time": 1479354830, "cache_updated": true, "changed": false, "failed": true, "msg": "'/usr/bin/apt-get -y -o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\"     install 'nginx'' failed: E: dpkg was interrupted, you must manually run 'sudo dpkg --configure -a' to correct the problem. \n", "stderr": "E: dpkg was interrupted, you must manually run 'sudo dpkg --configure -a' to correct the problem. \n", "stdout": "", "stdout_lines": []}

NO MORE HOSTS LEFT *************************************************************
	to retry, use: --limit @nginx.retry

PLAY RECAP *********************************************************************
10.4.15.191                : ok=2    changed=0    unreachable=0    failed=0   
10.4.15.209                : ok=1    changed=0    unreachable=0    failed=1   

      #+END_SRC
    + In the above command output you can see some FAILED hosts. This
      means that ansible was not able to complete mentioned tasks on
      that specific host and the reason for this is mentoned in the
      log printed on the terminal.
    + One can refer log and then rectify the errors.
    
* Handlers
  + A Handler is exactly the same as a Task (it can do anything a Task
    can), but it will run when called by another Task.
  + A Handler will take an action when called by an event it listens
    for.
  + Sample handler 
    #+BEGIN_SRC command
    ---
    - hosts: local
      tasks:
       - name: Install Nginx 
         apt: pkg=nginx state=install update_cache=true
         notify:
          - Start Nginx 
      handlers:
       - name: Start Nginx 
         service: name=nginx state=started
    #+END_SRC
   + This particular Handler uses the Service module, which can start,
     stop, restart, reload (and so on) system services. Here we simply
     tell Ansible that we want Nginx to be started.

* Variables 
  + The vars directory contains a main.yml file which simply lists
    variables we'll use. This provides a convenient place for us to
    change configuration-wide settings.
  + Here is what vars/main.yml file might look.
    #+BEGIN_SRC command
    ---
    domain: your-domain.com
    ssl_key: /etc/ssl/sfh/sfh.key
    ssl_crt: /etc/ssl/sfh/sfh.crt
    #+END_SRC
  
* Tasks 
  + Tasks are the actions to be performed on the servers.
  + All tasks related to a role are to be kept in a directory named tasks/main.yml
    #+BEGIN_SRC command
  ---
- name: Add Nginx Repository
  apt_repository: repo='ppa:nginx/stable' state=present
  register: ppastable

- name: Install Nginx
  apt: pkg=nginx state=installed update_cache=true
  when: ppastable|success
  register: nginxinstalled
  notify:
    - Start Nginx

- name: Add H5BP Config
  when: nginxinstalled|success
  copy: src=h5bp dest=/etc/nginx owner=root group=root

- name: Disable Default Site
  when: nginxinstalled|success
  file: dest=/etc/nginx/sites-enabled/default state=absent

- name: Add SFH Site Config
  when: nginxinstalled|success
  register: sfhconfig
  template: src=serversforhackers.com.j2 dest=/etc/nginx/sites-available/{{ '{{' }} domain {{ '}}'  }}.conf owner=root group=root

- name: Enable SFH Site Config
  when: sfhconfig|success
  file: src=/etc/nginx/sites-available/{{ '{{' }} domain {{ '}}'  }}.conf dest=/etc/nginx/sites-enabled/{{ '{{' }} domain {{ '}}'  }}.conf state=link


- name: Create Web root
  when: nginxinstalled|success
  file: dest=/var/www/{{ '{{' }} domain {{ '}}'  }}/public mode=775 state=directory owner=www-data group=www-data
  notify:
    - Reload Nginx

- name: Web Root Permissions
  when: nginxinstalled|success
  file: dest=/var/www/{{ '{{' }} domain {{ '}}'  }} mode=775 state=directory owner=www-data group=www-data recurse=yes
  notify:
    - Reload Nginx
    #+END_SRC  
  + The above playbook does the following -
    #+BEGIN_SRC command
    Add the nginx/stable repository
Install & start Nginx, register successful installation to trigger remaining Tasks
Add H5BP configuration
Disable the default virtual host by removing the symlink to the default file from the sites-enabled directory
Copy the serversforhackers.com.conf.j2 virtual host template into the Nginx configuration
Enable the virtual host configuration by symlinking it to the sites-enabled directory
Create the web root
Change permission for the project root directory, which is one level above the web root created previously
    #+END_SRC

* Commonly used ansible module 
** Command 
   + The command module takes the command name followed by a list of
     space-delimited arguments.
   + It will not be processed through the shell, so variables like
     $HOME and operations like "<", ">", "|", ";" and "&" will not
     work.
   + Examples ::
     #+BEGIN_SRC command
     # Example to fire a shutdown command
     - command: /sbin/shutown -t now 
     
     # Run the command if the specified file does not exist
     - command: /usr/bin/make_database.sh arg1 arg2 creates=/path/to/database
     
     # This command  will change th eworking directory to somedir/ and will only run when /path/to/database doesnot exist.
     - command: /usr/bin/make_database.sh arg1 arg2
       args:
        chdir: somedir/
        creates: /path/to/database
     #+END_SRC
   
* References
  + [[https://serversforhackers.com/an-ansible-tutorial][Servers for Hackers]]
  + [[http://stackoverflow.com/questions/21530577/fatal-error-python-h-no-such-file-or-directory][fatal error: Python.h: No such file or directory]]
  + https://ansible-tips-and-tricks.readthedocs.io/en/latest/ansible/install/
  + [[http://stackoverflow.com/questions/12982486/glib-compile-error-ffi-h-but-libffi-is-installed][GLib compile error (ffi.h), but libffi is installed]]
  + [[https://www.digitalocean.com/community/tutorials/how-to-configure-ssh-key-based-authentication-on-a-linux-server][SSH key access on digital ocean]]
  + [[http://docs.ansible.com/ansible/modules_by_category.html][Module index for Ansible]] 
  + [[http://docs.ansible.com/ansible/playbooks_intro.html][Ansible playbooks]]
  + [[http://docs.ansible.com/ansible/list_of_commands_modules.html][Command module]]
  
